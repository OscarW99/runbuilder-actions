name: iOS Firebase Distribution

on:
  workflow_dispatch:  # Manual trigger only - YOU control when to build
    inputs:
      release_notes:
        description: 'Release notes for this build'
        required: false
        default: 'Latest updates and improvements'
  # Optional: Add schedule for automatic builds
  # schedule:
  #   - cron: '0 12 */6 * *'  # Auto-rebuild every 6 days to prevent expiration

jobs:
  build-ios:
    name: Build & Distribute iOS App
    runs-on: macos-14  # Use specific macOS version instead of latest
    
    steps:
    - name: Checkout private repository
      uses: actions/checkout@v4
      with:
        repository: OscarW99/runbuilder
        token: ${{ secrets.PRIVATE_REPO_PAT }}  # PAT with repo access to private repo
        path: private-repo
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        
    - name: Install dependencies
      run: |
        cd private-repo/runbuilder
        flutter pub get
        
    - name: Auto-increment Version and Build Number
      run: |
        cd private-repo/runbuilder
        
        # Get current version from pubspec.yaml
        CURRENT_VERSION=$(grep "^version:" pubspec.yaml | cut -d' ' -f2)
        echo "Current version: $CURRENT_VERSION"
        
        # Extract version number and build number
        VERSION_NUMBER=$(echo $CURRENT_VERSION | cut -d'+' -f1)
        BUILD_NUMBER=$(echo $CURRENT_VERSION | cut -d'+' -f2)
        
        echo "Current version number: $VERSION_NUMBER"
        echo "Current build number: $BUILD_NUMBER"
        
        # Extract major, minor, patch from version number (e.g., 1.0.1 -> 1, 0, 1)
        MAJOR=$(echo $VERSION_NUMBER | cut -d'.' -f1)
        MINOR=$(echo $VERSION_NUMBER | cut -d'.' -f2)
        PATCH=$(echo $VERSION_NUMBER | cut -d'.' -f3)
        
        # Auto-increment patch version every deployment
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION_NUMBER="${MAJOR}.${MINOR}.${NEW_PATCH}"
        
        # Reset build number to 1 for new version, or increment if version unchanged
        NEW_BUILD_NUMBER=1
        NEW_VERSION="${NEW_VERSION_NUMBER}+${NEW_BUILD_NUMBER}"
        
        echo "New version: $NEW_VERSION (patch incremented from $PATCH to $NEW_PATCH)"
        
        # Update pubspec.yaml
        sed -i.bak "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml
        
        # Verify the change
        echo "Updated pubspec.yaml:"
        grep "^version:" pubspec.yaml
        
    - name: Clean and Setup iOS Pods
      run: |
        cd private-repo/runbuilder/ios
        # Clean existing pods installation
        rm -rf Pods
        rm -rf Podfile.lock
        # Install pods with repo update - this will apply our Podfile post_install hook
        pod install --repo-update
        
        # Verify that our post_install hook worked - check pod signing settings
        echo "=== Verifying Pod Code Signing Settings ==="
        grep -A 5 -B 5 "CODE_SIGN_STYLE" Pods/Pods.xcodeproj/project.pbxproj | head -20 || echo "No CODE_SIGN_STYLE found (which is expected for automatic signing)"
        
    - name: Setup Environment File
      run: |
        cd private-repo/runbuilder
        echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" > .env
        echo "STRAVA_CLIENT_ID=${{ secrets.STRAVA_CLIENT_ID }}" >> .env
        echo "STRAVA_CLIENT_SECRET=${{ secrets.STRAVA_CLIENT_SECRET }}" >> .env
        echo "Environment file created with API keys"
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Build iOS App
      run: |
        cd private-repo/runbuilder
        
        # Extract version info from pubspec.yaml
        VERSION_LINE=$(grep "^version:" pubspec.yaml)
        VERSION_NUMBER=$(echo $VERSION_LINE | cut -d' ' -f2 | cut -d'+' -f1)
        BUILD_NUMBER=$(echo $VERSION_LINE | cut -d'+' -f2)
        
        echo "Building with version: $VERSION_NUMBER, build: $BUILD_NUMBER"
        
        # Build iOS with proper versioning
        flutter build ios --release --no-codesign \
          --build-name="$VERSION_NUMBER" \
          --build-number="$BUILD_NUMBER"
        
    - name: Install Apple Certificate and Provisioning Profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate and provisioning profile from secrets
        echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
        echo "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode > $PP_PATH

        # DEBUG: Check if P12 file was decoded correctly
        echo "=== P12 File Debug ==="
        file $CERTIFICATE_PATH
        ls -la $CERTIFICATE_PATH
        echo "Trying to verify P12 file with openssl..."
        P12_PASSWORD_CLEAN=$(echo "$P12_PASSWORD" | tr -d '\n\r' | tr -d ' ')
        openssl pkcs12 -info -in $CERTIFICATE_PATH -noout -passin pass:"$P12_PASSWORD_CLEAN" || echo "P12 verification failed"
        
        # FIX: Convert P12 to macOS-compatible format using OpenSSL
        echo "=== Converting P12 to macOS-compatible format ==="
        openssl pkcs12 -in $CERTIFICATE_PATH -out /tmp/temp_cert.pem -clcerts -nokeys -passin pass:"$P12_PASSWORD_CLEAN"
        openssl pkcs12 -in $CERTIFICATE_PATH -out /tmp/temp_key.pem -nocerts -nodes -passin pass:"$P12_PASSWORD_CLEAN"
        openssl pkcs12 -export -out /tmp/fixed_certificate.p12 -in /tmp/temp_cert.pem -inkey /tmp/temp_key.pem -passin pass:"$P12_PASSWORD_CLEAN" -passout pass:"$P12_PASSWORD_CLEAN" -name "iOS Distribution"
        
        # Use the fixed P12 file
        CERTIFICATE_PATH=/tmp/fixed_certificate.p12

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain (with proper password cleaning)
        P12_PASSWORD_CLEAN=$(echo "$P12_PASSWORD" | tr -d '\n\r' | tr -d ' ')
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD_CLEAN" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

        # Extract provisioning profile UUID for later use
        PROFILE_UUID=$(security cms -D -i $PP_PATH | plutil -extract UUID xml1 -o - - | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
        echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
        echo "Provisioning Profile UUID: $PROFILE_UUID"

    - name: Debug Code Signing Setup
      run: |
        echo "=== Available Code Signing Identities ==="
        security find-identity -v -p codesigning
        echo ""
        echo "=== Installed Provisioning Profiles ==="
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        echo ""
        echo "=== Profile UUID ==="
        echo "PROFILE_UUID: $PROFILE_UUID"
        echo ""
        echo "=== Certificate Details ==="
        security find-identity -v -p codesigning | grep "5GNC2JSW59" || echo "No certificate found for team 5GNC2JSW59"
        echo ""
        echo "=== Provisioning Profile Details ==="
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | head -50
        echo ""
        echo "=== Check Certificate in NEW Profile ==="
        security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | grep -A 20 -B 5 "DeveloperCertificates"
        echo ""
        echo "=== Current Certificate SHA1 ==="
        security find-identity -v -p codesigning | grep "5GNC2JSW59"

    - name: Build and Sign IPA with Fresh Certificates
      run: |
        cd private-repo/runbuilder
        
        # Find the correct signing identity
        SIGNING_IDENTITY=$(security find-identity -v -p codesigning | grep "5GNC2JSW59" | head -1 | cut -d '"' -f 2)
        echo "Using signing identity: $SIGNING_IDENTITY"
        
        # Reinstall pods to apply Podfile signing changes
        echo "=== Reinstalling Pods to Apply Signing Changes ==="
        cd ios
        pod install
        cd ..
        
        # Build without global signing settings - let individual targets handle their own signing
        echo "=== Building with Target-Specific Signing ==="
        xcodebuild -workspace ios/Runner.xcworkspace \
                   -scheme Runner \
                   -configuration Release \
                   -destination generic/platform=iOS \
                   -archivePath build/Runner.xcarchive \
                   clean archive
        
        # Create export options plist for ad-hoc distribution
        cat > build/ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>teamID</key>
            <string>5GNC2JSW59</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>com.oscarw99.runbuilder</key>
                <string>$PROFILE_UUID</string>
            </dict>
        </dict>
        </plist>
        EOF
                   
        # Export IPA
        xcodebuild -exportArchive \
                   -archivePath build/Runner.xcarchive \
                   -exportPath build/ \
                   -exportOptionsPlist build/ExportOptions.plist
        
        # Debug: Check what files were created
        echo "=== Files in build directory after export ==="
        ls -la build/
        echo "=== Looking for IPA files ==="
        find build/ -name "*.ipa" -type f
        
        # Find the actual IPA file and get the absolute path
        IPA_FILE=$(find build/ -name "*.ipa" -type f | head -1)
        if [ -z "$IPA_FILE" ]; then
            echo "ERROR: No IPA file found!"
            exit 1
        fi
        
        # Convert to absolute path to avoid path issues
        IPA_ABSOLUTE_PATH=$(realpath "$IPA_FILE")
        echo "Found IPA file: $IPA_FILE"
        echo "Absolute IPA path: $IPA_ABSOLUTE_PATH"
        echo "IPA_PATH=$IPA_ABSOLUTE_PATH" >> $GITHUB_ENV
                   
    - name: Upload IPA as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: RunBuilder-iOS-${{ github.run_number }}
        path: ${{ env.IPA_PATH }}
        retention-days: 30
        
    - name: Install Firebase CLI and Dependencies
      run: |
        # Install Firebase CLI only - keep it simple
        npm install -g firebase-tools
        echo "Firebase CLI installed"
        firebase --version
        
        # Install Python dependencies for direct API access
        pip3 install PyJWT requests cryptography
        echo "Python dependencies installed"
        
    - name: Upload to Firebase App Distribution  
      env:
        FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        FIREBASE_PROJECT_ID: runbuilder-71777
      run: |
        cd private-repo/runbuilder
        
        echo " =================================="
        echo " HARDCODED FIREBASE UPLOAD - NO MORE DEBUGGING!"
        echo " =================================="
        
        # Find the actual IPA file dynamically
        echo " Searching for IPA file..."
        IPA_FILE=$(find . -name "*.ipa" -type f | head -1)
        if [ -n "$IPA_FILE" ]; then
            IPA_PATH="$IPA_FILE"
            echo "[SUCCESS] Found IPA file: '$IPA_PATH'"
        else
            # Fallback to expected path
            IPA_PATH="build/ios/ipa/Runner.ipa"
            echo "[WARNING] No IPA found, using expected path: '$IPA_PATH'"
        fi
        
        echo " Creating HARDCODED service account file..."
        cat > service-account.json << 'EOF'
        {
          "type": "service_account",
          "project_id": "runbuilder-71777",
          "private_key_id": "6a8f4851e52fb9dbf12951fbce380fc611a063f0",
          "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCT8LUxTtBWaohh\nnJx0DfkAsgWMp8WBrDq8rfRxOAdVhFoCzpVj1yf4qzp2srXVoopg6m6X7bZIDwjC\nDn++Na/BvuxQ7yPEOdRe2Q7rBURJsinS3wTo+RWHkfeikBDfVvX1mEIRrcfa7g6Z\nA7nunPRwLp5CEJXVjR31JR+xANquTKtaYpQxayRWcz0vbt+qcvxSDJDBoT9vlc71\n4LJnDcmuX2fmKXJDtEzcQkD1FAvigunm4nB6S8Lwxo4D/cBaf8+0m/EI4Q1QmG7E\nP+PAnOpQAO0EvuT8SSXWxGucHyj4Wgo3kHVs1moWGJG23mbggwYrP7MfqERk4hmg\n42oSSnn9xyRZrRAgMBAAECggEABQ0b8qy2j6zK2UkE7utESlYPSmL+dXP75n06\nwS3Dg7F0nAC5Db6j6RQCRq6VZ3pJmpjb4SjG/NuJOK8N8S3f+MCne98W3p/ViRie\nQMmBhTPjsnP58/Eam2q6zNHPHFZoxtObCzrRbxffvGO/PYI9pJGPwqNQyGysH3DA\nOp+4k1QhcinIoajkrE0T8LU/MAr1r44t7eHqp6nCBbcoY83mWIsBCDr7vuoUpQkr\n3r9PjLehHQTn2iErNWk6ZssnQNeW0MHVQZQ/LRI+BDj3Br+72cDVy/BNaRG5qzSi\nlrnB/uo/qoUknqlH1kp6up4XcItbrK8aNL7AdoNUWFq6DyL/kuQQuXQKBgQDE4SY2\nBadJttA/jbR5nQrmJDnoVve0kc0WrL0NMnTebCsysf4Xi+yIyClaXVbIN7lBRxDU\nJF2OeJqUIVY+KnRMn+zFvZsn0Y4KAwQDMvD93KyI200pvZ13qU3coSHs8TCl/2yO\nfb04TyehzNCeddnshlG31c1YzXGIosvNqVbI55iKwKBgQDAXWuWlE2bbGXUKDKd\nXCQFYm9LMdLDfz+UnNMnvvxO70HaBqw8bozeOrIqAHyB6umGARmObAgbJRQKazvU\ndi9AwxMuWsakI9LXenA+OOG2rStyp4b3IcLqHoc2ixg/i+JaZzs6wAY3a4zf+vGW\naqCyI4D/RGzKch3aYJnhEkzJBFE8wKBgCTyh+Q9fV6FE2HJ6yOSlRUWhWzNHtLnW\nxy8Guom2weaqDx7Fho5nvPodHJD8ARVCMwqVQsq4+/XzFKeSvwRY0nuhyF77cySX\nCxjjA3gCh0IGDynvGFZynbMvBL6nk5EGTgdzjaTfE4z9KEVudTzEzOjElus0HGFF\ndrDcpDzEiZxfPAoGANSLZnEDwg/9i+fA8qhAsqrA4XvgaiOHxS3KaETWRTmCKqSY\nEt6C16sD969o8ikqQfQKawn5uV1aG1WndqjHKk9Net2bUbf8WhfQFeEqQFrzY7o/\nWGTfLNo5+PRPI++yw9tXjJ4nRZcz+TJ1+TEkCb6Pkjrd+ByZ4iHutlxDOAwzdP8C\ngYEAtNOptCBu0gE+FqhDwbfLnQ2pugj8IfEGTTv1K5GCcI93nuVnofqWDgSgX28g\nz2u1hZ0iQS0wGPOMVAsEnOHtvnZgo1UxEczeX7C/XgSweo5sLX3Btz7Ad7jTV0Dj\nImfDtQywFIXuFAiN8Zv3B4fFFUnL2F3yYJfaqJhYHXdBtw2DFQ=\n-----END PRIVATE KEY-----\n",
          "client_email": "firebase-adminsdk-fbsvc@runbuilder-71777.iam.gserviceaccount.com",
          "client_id": "102447328975825099287",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token",
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40runbuilder-71777.iam.gserviceaccount.com",
          "universe_domain": "googleapis.com"
        }
        EOF
        
        echo " Service account file created!"
        echo "File exists: $(test -f service-account.json && echo 'YES' || echo 'NO')"
        echo "File size: $(wc -c < service-account.json) bytes"
        
        echo " Setting up authentication..."
        export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service-account.json"
        echo "GOOGLE_APPLICATION_CREDENTIALS set to: '$GOOGLE_APPLICATION_CREDENTIALS'"
        
        echo " Testing authentication..."
        # Force Firebase CLI to use service account by activating it first
        gcloud auth activate-service-account --key-file=service-account.json 2>/dev/null || echo "gcloud not available, trying alternative"
        
        echo " =================================="
        echo " FIREBASE UPLOAD ATTEMPT - TRYING EVERYTHING"
        echo " =================================="
        
        # Method 1: Try with explicit service account flag (if supported)
        echo "Method 1: Explicit service account flag"
        firebase appdistribution:distribute "$IPA_PATH" \
          --app "$FIREBASE_APP_ID" \
          --project "runbuilder-71777" \
          --service-account-file service-account.json \
          --release-notes "RunBuilder iOS Build #${{ github.run_number }} - Method 1" 2>&1 && {
          echo "[SUCCESS] Method 1 worked!"
          echo "🎉 FINALLY! After 7 hours, it works!"
          exit 0
        } || echo "[ERROR] Method 1 failed"
        
        # Method 2: Try using the credential file directly in command
        echo "Method 2: Environment variable approach"
        GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service-account.json" firebase appdistribution:distribute "$IPA_PATH" \
          --app "$FIREBASE_APP_ID" \
          --project "runbuilder-71777" \
          --release-notes "RunBuilder iOS Build #${{ github.run_number }} - Method 2" 2>&1 && {
          echo "[SUCCESS] Method 2 worked!"
          echo "🎉 FINALLY! After 7 hours, it works!"
          exit 0
        } || echo "[ERROR] Method 2 failed"
        
        # Method 3: Try different project specification
        echo "Method 3: Different project ID format"
        firebase use runbuilder-71777 2>/dev/null || echo "Failed to set project"
        firebase appdistribution:distribute "$IPA_PATH" \
          --app "$FIREBASE_APP_ID" \
          --release-notes "RunBuilder iOS Build #${{ github.run_number }} - Method 3" 2>&1 && {
          echo "[SUCCESS] Method 3 worked!"
          echo "🎉 FINALLY! After 7 hours, it works!"
          exit 0
        } || echo "[ERROR] Method 3 failed"
        
        # Method 4: Initialize firebase project first
        echo "Method 4: Initialize project first"
        echo "runbuilder-71777" | firebase use --add 2>/dev/null || echo "Failed to add project"
        firebase appdistribution:distribute "$IPA_PATH" \
          --app "$FIREBASE_APP_ID" \
          --project "runbuilder-71777" \
          --release-notes "RunBuilder iOS Build #${{ github.run_number }} - Method 4" 2>&1 && {
          echo "[SUCCESS] Method 4 worked!"
          echo "🎉 FINALLY! After 7 hours, it works!"
          exit 0
        } || echo "[ERROR] Method 4 failed"
        
        echo "[ERROR] ALL FIREBASE METHODS FAILED"
        echo "This is likely a Firebase CLI configuration issue, not credentials"
        echo "The service account JSON is valid and present"
        echo "Checking Firebase CLI configuration..."
        firebase projects:list 2>&1 || echo "Cannot list projects"
        echo "Environment check:"
        env | grep -E "(GOOGLE|FIREBASE)" || echo "No Google/Firebase env vars found"
        exit 1
          
    - name: Create Release Notes
      run: |
        echo " iOS build completed successfully!" >> release_notes.txt
        echo " Build #${{ github.run_number }}" >> release_notes.txt
        echo " Download the IPA from GitHub Actions artifacts" >> release_notes.txt
        echo " Release Notes: ${{ github.event.inputs.release_notes || 'Auto-rebuild to prevent expiration' }}" >> release_notes.txt
        echo "" >> release_notes.txt
        echo " Installation Instructions:" >> release_notes.txt
        echo "1. Download the IPA file from the Actions artifacts" >> release_notes.txt
        echo "2. Install using Xcode, TestFlight, or a device management tool" >> release_notes.txt
        echo "3. Trust the developer profile in Settings > General > VPN & Device Management" >> release_notes.txt
        
    - name: Upload Release Notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release_notes.txt
        
    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
        rm -f ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision || true
